#version 430 core


layout (local_size_x = 16, local_size_y = 16) in;

layout (rgba32f, binding = 0) uniform image2D img_output;

uniform sampler2D velocityPing;
uniform sampler2D obstacle;

uniform float cellSize;
uniform float timeStep;

float get_vort(vec2 coords){
	vec2 vN = texture(velocityPing, (coords + 0.5 + vec2(0.0, 1.0))/1024.0, 0).xy;
	vec2 vS = texture(velocityPing, (coords + 0.5 + vec2(0.0, -1.0))/1024.0, 0).xy;
	vec2 vE = texture(velocityPing, (coords + 0.5 + vec2(1.0, 0.0))/1024.0, 0).xy;
	vec2 vW = texture(velocityPing, (coords + 0.5 + vec2(-1.0, 0.0))/1024.0, 0).xy;
	return 0.5 / cellSize * ((vE.y - vW.y) - (vN.x - vS.x));
}

void main(){
	

	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	vec4 col = vec4(0,0,0,1);
	vec2 u = texture(velocityPing, (pixel_coords + 0.5)/1024.0, 0).xy;
	float solid = texelFetch(obstacle, pixel_coords, 0).x;
	if(solid>0){
		col = vec4(u, 0, 1);

		float vortC = get_vort(pixel_coords);
		float vortN = get_vort(pixel_coords + vec2(0.0, 1.0));
		float vortS = get_vort(pixel_coords + vec2(0.0, -1.0));
		float vortE = get_vort(pixel_coords + vec2(1.0, 0.0));
		float vortW = get_vort(pixel_coords + vec2(-1.0, 0.0));
		
		vec2 f = 0.5 / cellSize * vec2(abs(vortN) - abs(vortS), abs(vortE) - abs(vortW));

		f *= cellSize * vortC * vec2(1, -1) / sqrt(max(dot(f, f), 0.0002));

		col += vec4( f * timeStep * 3, 0, 0 );

	}




	imageStore(img_output, pixel_coords, col);
}