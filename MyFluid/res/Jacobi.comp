#version 430 core


layout (local_size_x = 16, local_size_y = 16) in;
layout (rgba32f, binding = 0) uniform image2D img_output;

uniform sampler2D pressurePing;
uniform sampler2D obstacle;
uniform sampler2D divergence;

uniform float timeStep;
uniform float cellSize;

void main(){

	float alpha = -cellSize * cellSize;
	float invBeta = 0.25;

	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	vec4 col = vec4(vec3(0),1.0);

	vec4 pN = texelFetchOffset(pressurePing, pixel_coords, 0, ivec2(0, 1));
	vec4 pS = texelFetchOffset(pressurePing, pixel_coords, 0, ivec2(0, -1));
	vec4 pE = texelFetchOffset(pressurePing, pixel_coords, 0, ivec2(1, 0));
	vec4 pW = texelFetchOffset(pressurePing, pixel_coords, 0, ivec2(-1, 0));
	vec4 pC = texelFetchOffset(pressurePing, pixel_coords, 0, ivec2(0, 0));

	vec3 oN = texelFetchOffset(obstacle, pixel_coords, 0, ivec2(0, 1)).xyz;
	vec3 oS = texelFetchOffset(obstacle, pixel_coords, 0, ivec2(0, -1)).xyz;
	vec3 oE = texelFetchOffset(obstacle, pixel_coords, 0, ivec2(1, 0)).xyz;
	vec3 oW = texelFetchOffset(obstacle, pixel_coords, 0, ivec2(-1, 0)).xyz;

	if (oN.x == 0) pN = pC;
    if (oS.x == 0) pS = pC;
    if (oE.x == 0) pE = pC;
    if (oW.x == 0) pW = pC;

	if(pixel_coords.x == 0) pW =pC;
	if(pixel_coords.x >= 1024 - 1) pE = pC;
	if(pixel_coords.y == 0) pS = pC;
	if(pixel_coords.y >= 1024 - 1) pN = pC;

	vec4 bC = texelFetch(divergence, pixel_coords, 0);

	col = (pW + pE + pS + pN + alpha * bC * 1) * invBeta;

	imageStore(img_output, pixel_coords, col);
}