#version 430 core


layout (local_size_x = 16, local_size_y = 16) in;
layout (rgba32f, binding = 0) uniform image2D img_output;

uniform sampler2D velocityPing;
uniform sampler2D pressurePing;
uniform sampler2D obstacle;

uniform float timeStep;
uniform float cellSize;

void main(){

	float gradienScale = 1.0/cellSize;

	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	vec4 col = vec4(vec3(0),1.0);
	
	vec3 oC = texelFetch(obstacle,pixel_coords, 0).xyz;
	if(oC.x > 0.0){
		float pN = texelFetchOffset(pressurePing, pixel_coords, 0, ivec2(0, 1)).r;
		float pS = texelFetchOffset(pressurePing, pixel_coords, 0, ivec2(0, -1)).r;
		float pE = texelFetchOffset(pressurePing, pixel_coords, 0, ivec2(1, 0)).r;
		float pW = texelFetchOffset(pressurePing, pixel_coords, 0, ivec2(-1, 0)).r;
		float pC = texelFetch(pressurePing, pixel_coords, 0).r;

		vec3 oN = texelFetchOffset(obstacle, pixel_coords, 0, ivec2(0, 1)).xyz;
		vec3 oS = texelFetchOffset(obstacle, pixel_coords, 0, ivec2(0, -1)).xyz;
		vec3 oE = texelFetchOffset(obstacle, pixel_coords, 0, ivec2(1, 0)).xyz;
		vec3 oW = texelFetchOffset(obstacle, pixel_coords, 0, ivec2(-1, 0)).xyz;

		vec2 obstV = vec2(0.0);
		vec2 vMask = vec2(1.0);

		if (oN.x == 0) { pN = pC; obstV.y = 0; vMask.y = 0; }
		if (oS.x == 0) { pS = pC; obstV.y = 0; vMask.y = 0; }
		if (oE.x == 0) { pE = pC; obstV.x = 0; vMask.x = 0; }
		if (oW.x == 0) { pW = pC; obstV.x = 0; vMask.x = 0; }

		if(pixel_coords.x == 0) pW =pC;
		if(pixel_coords.x >= 1024 - 1) pE = pC;
		if(pixel_coords.y == 0) pS = pC;
		if(pixel_coords.y >= 1024 - 1) pN = pC;

		vec2 oldV = texelFetch(velocityPing, pixel_coords, 0).xy;
		vec2 grad = vec2(pE - pW, pN - pS) * gradienScale;
		vec2 newV = oldV - grad;
		//col = vec4((vMask * newV) + obstV, 0.0, 1.0);
		col = vec4(newV, 0.0, 1.0);
	}


	imageStore(img_output, pixel_coords, col);
}